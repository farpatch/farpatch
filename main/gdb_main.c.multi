

#include <assert.h>
#include <inttypes.h>
#include <lwip/err.h>
#include <lwip/netdb.h>
#include <lwip/sockets.h>
#include <lwip/sys.h>
#include <stdio.h>
#include <string.h>

#include "esp_log.h"

#include "exception.h"
#include "gdb_if.h"
#include "gdb_main_farpatch.h"
#include "gdb_main.h"
#include "gdb_packet.h"
#include "general.h"
#include "rtt.h"

/* objects used to manipulate the main queue of events */
QueueHandle_t bmp_message_queue;

struct bmp_message_queue_item {
	char *buffer;
	int size;
	int index;
};

#define GDB_PACKET_BUFFER_SIZE 1024U

static volatile int num_clients;
static volatile bool broadcast_message;

extern volatile int bmp_wifi_instance_idx;
extern volatile struct bmp_wifi_instance **instances;
extern volatile int bmp_wifi_instance_count;

struct exception **get_innermost_exception(void)
{
	void **ptr = (void **)pvTaskGetThreadLocalStoragePointer(NULL, GDB_TLS_INDEX);
	assert(ptr);
	return (struct exception **)&ptr[1];
}

static void gdb_wifi_destroy(struct bmp_wifi_instance *instance)
{
	ESP_LOGI("gdb", "destroy %d", instance->sock);
	num_clients--;

	close(instance->sock);

	TaskHandle_t pid = instance->pid;
	free(instance);

	if (bmp_wifi_instance_count > 1) {
		struct bmp_wifi_instance **new_fds = malloc(sizeof(struct bmp_wifi_instance *) * (bmp_wifi_instance_count - 1));
		int src_idx = 0;
		int dest_idx = 0;
		if (bmp_wifi_instance_idx == instance->index) {
			bmp_wifi_instance_idx = -1;
		}
		for (src_idx = 0; src_idx < bmp_wifi_instance_count; src_idx++) {
			if (instances[src_idx] != instance) {
				instances[dest_idx]->index = dest_idx;
				if (bmp_wifi_instance_idx == src_idx) {
					bmp_wifi_instance_idx = dest_idx;
				}
				new_fds[dest_idx++] = instances[src_idx];
			}
		}
		assert(dest_idx == (src_idx - 1));
		struct bmp_wifi_instance **old_fds = instances;
		instances = new_fds;
		free(old_fds);
	} else {
		free(instances);
		instances = NULL;
		bmp_wifi_instance_idx = -1;
	}
	bmp_wifi_instance_count -= 1;
	vTaskDelete(pid);
}

static void gdb_wifi_task(void *arg)
{
	struct bmp_wifi_instance *instance = (struct bmp_wifi_instance *)arg;

	void *tls[2] = {};
	tls[0] = arg;
	vTaskSetThreadLocalStoragePointer(NULL, GDB_TLS_INDEX, tls); // used for exception handling

	ESP_LOGI("gdb", "Started task %d this:%p tlsp:%p", instance->sock, instance, tls);

	int opt = 1;
	setsockopt(instance->sock, IPPROTO_TCP, TCP_NODELAY, (void *)&opt, sizeof(opt));
	opt = 1; /* SO_KEEPALIVE */
	setsockopt(instance->sock, SOL_SOCKET, SO_KEEPALIVE, (void *)&opt, sizeof(opt));
	opt = 3; /* s TCP_KEEPIDLE */
	setsockopt(instance->sock, IPPROTO_TCP, TCP_KEEPIDLE, (void *)&opt, sizeof(opt));
	opt = 1; /* s TCP_KEEPINTVL */
	setsockopt(instance->sock, IPPROTO_TCP, TCP_KEEPINTVL, (void *)&opt, sizeof(opt));
	opt = 3; /* TCP_KEEPCNT */
	setsockopt(instance->sock, IPPROTO_TCP, TCP_KEEPCNT, (void *)&opt, sizeof(opt));
	opt = 1;

	num_clients++;

	if (cur_target) {
		void gdb_halt_target(void);
		gdb_halt_target();
	}

	while (true) {
		struct exception e;
		// bool have_mutex = false;
		TRY_CATCH (e, EXCEPTION_ALL) {
			while (1) {
				size_t size = gdb_getpacket(instance->rx_buf[instance->rx_buf_index], GDB_PACKET_BUFFER_SIZE);
				struct bmp_message_queue_item item = {
					.buffer = instance->rx_buf[instance->rx_buf_index],
					.size = size,
					.index = instance->index,
				};
				ESP_LOGI("sock", "sending message %s to bmp message queue", item.buffer);
				xQueueSend(bmp_message_queue, &item, portMAX_DELAY);
				instance->rx_buf_index = (instance->rx_buf_index + 1) & 3;
			}
		}
		if (e.type == EXCEPTION_NETWORK) {
			ESP_LOGE("exception", "network exception -- exiting: %s", e.msg);
			break;
		} else if (e.type) {
			gdb_putpacketz("EFF");
			target_list_free();
			ESP_LOGI("exception", "TARGET LOST e.type:%" PRId32, e.type);
		}
	}

	gdb_wifi_destroy(instance);
}

static void new_gdb_wifi_instance(int sock)
{
	char name[CONFIG_FREERTOS_MAX_TASK_NAME_LEN];
	snprintf(name, sizeof(name) - 1, "gdbc fd:%" PRId16, sock);

	struct bmp_wifi_instance *instance = malloc(sizeof(struct bmp_wifi_instance));
	if (!instance) {
		return;
	}

	memset(instance, 0, sizeof(*instance));
	instance->sock = sock;

	instances = realloc(instances, sizeof(struct bmp_wifi_instance **) * (bmp_wifi_instance_count + 1));
	instance->index = bmp_wifi_instance_count;
	instances[bmp_wifi_instance_count++] = instance;

	xTaskCreate(gdb_wifi_task, name, 12000, (void *)instance, tskIDLE_PRIORITY + 2, &instance->pid);
}

static void bmp_task(void *arg)
{
	BaseType_t xStatus;
	struct bmp_message_queue_item item;

	void *tls[2] = {};
	tls[0] = arg;
	vTaskSetThreadLocalStoragePointer(NULL, GDB_TLS_INDEX, tls); // used for exception handling

	while (true) {
		struct exception e;
		// bool have_mutex = false;
		TRY_CATCH (e, EXCEPTION_ALL) {
			while (1) {
				if (gdb_target_running && cur_target) {
					ESP_LOGI("bmp", "polling target...");
					gdb_poll_target();
				}
				// // Check again, as `gdb_poll_target()` may
				// // alter these variables.
				// if (!gdb_target_running || !cur_target) {
				// 	break;
				// }

				// NOTE: Assume RTT is available on this target
				if (gdb_target_running && cur_target && rtt_enabled) {
					ESP_LOGI("bmp", "polling rtt...");
					poll_rtt(cur_target);
				}

				// ESP_LOGI("bmp", "receiving from bmp_message_queue...");
				xStatus = xQueueReceive(bmp_message_queue, &item, pdMS_TO_TICKS(20));
				// ESP_LOGI("bmp", "result from bmp_message_queue: %d", xStatus);

				if (xStatus == pdPASS) {
					if (item.buffer[0] == '\x03' || item.buffer[0] == '\x04') {
						target_halt_request(cur_target);
					} else {
						if (!gdb_target_running || !cur_target) {
							bmp_wifi_instance_idx = item.index;
						} else {
							bmp_wifi_instance_idx = -1;
						}
						ESP_LOGI("bmp", "calling main(\"%s\", %d) with item index of %d", item.buffer, item.size,
							bmp_wifi_instance_idx);
						gdb_main(item.buffer, item.size);
						bmp_wifi_instance_idx = -1;
						ESP_LOGI("bmp", "returned from main");
					}
				}
			}

			// SET_IDLE_STATE(1);
			// size_t size = gdb_getpacket(instance->rx_buf, GDB_PACKET_BUFFER_SIZE);
			// // If port closed and target detached, stay idle
			// if ((instance->rx_buf[0] != 0x04) || cur_target) {
			// 	SET_IDLE_STATE(0);
			// }

			// gdb_main(instance->rx_buf, size);
		}

		if (e.type == EXCEPTION_NETWORK) {
			ESP_LOGE("exception", "network exception -- exiting: %s", e.msg);
			break;
		} else if (e.type) {
			gdb_putpacketz("EFF");
			target_list_free();
			ESP_LOGI("exception", "TARGET LOST e.type:%" PRId32, e.type);
		}
	}
}

void gdb_net_task(void *arg)
{
	struct sockaddr_in addr;
	int gdb_if_serv;
	int opt;

	addr.sin_family = AF_INET;
	addr.sin_port = htons(CONFIG_TCP_PORT);
	addr.sin_addr.s_addr = htonl(INADDR_ANY);

	assert((gdb_if_serv = socket(PF_INET, SOCK_STREAM, 0)) != -1);
	opt = 1;
	assert(setsockopt(gdb_if_serv, SOL_SOCKET, SO_REUSEADDR, (void *)&opt, sizeof(opt)) != -1);
	assert(setsockopt(gdb_if_serv, IPPROTO_TCP, TCP_NODELAY, (void *)&opt, sizeof(opt)) != -1);

	assert(bind(gdb_if_serv, (struct sockaddr *)&addr, sizeof(addr)) != -1);
	assert(listen(gdb_if_serv, 1) != -1);

	bmp_message_queue = xQueueCreate(3, sizeof(struct bmp_message_queue_item));
	extern QueueHandle_t getc_queue_from_thread;
	getc_queue_from_thread = xQueueCreate(1, sizeof(char));

	xTaskCreate(bmp_task, "blackmagic", 10000, NULL, tskIDLE_PRIORITY + 1, NULL);
	ESP_LOGI("bmp", "Blackmagic task running");

	ESP_LOGI("gdb", "Listening on TCP:%d", CONFIG_TCP_PORT);

	while (1) {
		int s = accept(gdb_if_serv, NULL, NULL);
		if (s > 0) {
			new_gdb_wifi_instance(s);
		}
	}
}
