/*
 * This file is part of the Black Magic Debug project.
 *
 * Copyright (C) 2011  Black Sphere Technologies Ltd.
 * Written by Gareth McMullin <gareth@blacksphere.co.nz>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/* This file implements a transparent channel over which the GDB Remote
 * Serial Debugging protocol is implemented.  This implementation for Linux
 * uses a TCP server on port 2022.
 */
#include <stdio.h>

#include <lwip/err.h>
#include <lwip/netdb.h>
#include <lwip/sockets.h>
#include <lwip/sys.h>

#include "esp_log.h"

#include <freertos/FreeRTOS.h>
#include <freertos/timers.h>

#include "gdb_if.h"
#include "gdb_packet.h"
#include "gdb_main.h"
#include "gdb_main_farpatch.h"
#include "gdb_hostio.h"

#include "exception.h"
#include "general.h"
#include "hex_utils.h"
#include "target.h"

#include <string.h>
#include <assert.h>

volatile int bmp_wifi_instance_idx = -1;
volatile struct bmp_wifi_instance **instances;
volatile int bmp_wifi_instance_count;

QueueHandle_t getc_queue_from_thread;
struct bmp_message_queue_item {
	char c;
};

static unsigned char gdb_wifi_if_getchar(struct bmp_wifi_instance *instance)
{
	uint8_t tmp;
	int ret;

	if (instance->is_shutting_down) {
		return 0;
	}

	ret = recv(instance->sock, &tmp, 1, 0);
	if (ret <= 0) {
		instance->is_shutting_down = true;
		raise_exception(EXCEPTION_NETWORK, "error on getchar");
		// should not be reached
		return 0;
	}
	return tmp;
}

static unsigned char gdb_wifi_if_getchar_to(struct bmp_wifi_instance *instance, int timeout)
{
	if (instance->is_shutting_down) {
		return 0xff;
	}
	if (instance->unget > 0) {
		unsigned char ret = instance->unget;
		instance->unget = 0;
		return ret;
	}
	// Optimization for "MSG_PEEK"
	// if (timeout == 0) {
	// 	uint8_t tmp;
	// 	int ret = recv(instance->sock, &tmp, 1, MSG_DONTWAIT);
	// 	if (ret == 1) {
	// 		return tmp;
	// 	}
	// 	return 0xFF;
	// }
	fd_set fds;
	struct timeval tv = {};

	if (timeout != 0) {
		tv.tv_sec = timeout / 1000;
		tv.tv_usec = (timeout % 1000) * 1000;
	}

	FD_ZERO(&fds);
	FD_SET(instance->sock, &fds);

	int ret = select(instance->sock + 1, &fds, NULL, NULL, (timeout >= 0) ? &tv : NULL);
	if (ret > 0) {
		char c = gdb_wifi_if_getchar(instance);
		return c;
	}

	if (ret < 0) {
		instance->is_shutting_down = true;
		raise_exception(EXCEPTION_NETWORK, "error on getchar_to");
	}
	return 0xFF;
}

static void gdb_wifi_if_putchar(struct bmp_wifi_instance *instance, unsigned char c, int flush)
{
	if (instance->is_shutting_down) {
		return;
	}

	instance->tx_buf[instance->tx_bufsize++] = c;
	if (flush || (instance->tx_bufsize == sizeof(instance->tx_buf))) {
		if ((instance->sock > 0) && (instance->tx_bufsize > 0)) {
			int ret = send(instance->sock, instance->tx_buf, instance->tx_bufsize, 0);
			if (ret <= 0) {
				instance->is_shutting_down = true;
				raise_exception(EXCEPTION_NETWORK, "error on putchar");
				// should not be reached
				return;
			}
		}
		instance->tx_bufsize = 0;
	}
}

unsigned char gdb_if_getchar_to(int timeout)
{
	BaseType_t xStatus;
	void **ptr = (void **)pvTaskGetThreadLocalStoragePointer(NULL, GDB_TLS_INDEX);
	assert(ptr);

	if (!ptr[0]) {
		char c;

		// If the index suddenly becomes -1, then bad things have happened.
		if (bmp_wifi_instance_idx == -1) {
			raise_exception(EXCEPTION_NETWORK, "bmp_wifi_instance_idx went away");
			return 0xff;
		}

		xStatus = xQueueReceive(getc_queue_from_thread, &c, pdMS_TO_TICKS(timeout));
		if (xStatus == pdPASS) {
			return c;
		}
		return 0xff;
	}
	char c = gdb_wifi_if_getchar_to(ptr[0], timeout);
	if ((bmp_wifi_instance_idx != -1) && (instances[bmp_wifi_instance_idx] == ptr[0])) {
		xQueueSend(getc_queue_from_thread, &c, portMAX_DELAY);
		return 0xff;
	}
	return c;
}

/// @brief Get a character from the network connection, or from the primary listener
/// @param  
/// @return 
unsigned char gdb_if_getchar(void)
{
	BaseType_t xStatus;
	void **ptr = (void **)pvTaskGetThreadLocalStoragePointer(NULL, GDB_TLS_INDEX);
	assert(ptr);

	while (1) {
		// If ptr[0] is NULL, it's because this is in the BMP main thread. This thread
		// has no network connections, and instead gets its characters from other threads.
		if (!ptr[0]) {
			char c;
			// If the index suddenly becomes -1, then bad things have happened.
			if (bmp_wifi_instance_idx == -1) {
				raise_exception(EXCEPTION_NETWORK, "bmp_wifi_instance_idx went away");
				return 0xff;
			}
			xStatus = xQueueReceive(getc_queue_from_thread, &c, pdMS_TO_TICKS(200));
			if (xStatus == pdPASS) {
				return c;
			}
			continue;
		}

		// Since ptr[0] is not NULL, this is a listener thread. Recieve from the network.
		// If the main thread is trying to listen to this thread in particular, don't send
		// the data to the listener thread. Instead, send it via a queue to the main thread.
		char c = gdb_wifi_if_getchar(ptr[0]);
		if ((bmp_wifi_instance_idx != -1) && (instances[bmp_wifi_instance_idx] == ptr[0])) {
			xQueueSend(getc_queue_from_thread, &c, portMAX_DELAY);
			continue;
		}
		return c;
	}
}

void gdb_if_putchar(unsigned char c, int flush)
{
	// void **ptr = (void **)pvTaskGetThreadLocalStoragePointer(NULL, GDB_TLS_INDEX);
	// assert(ptr);
	// gdb_wifi_if_putchar(ptr[0], c, flush);
	if (bmp_wifi_instance_idx == -1) {
		int i;
		for (i = 0; i < bmp_wifi_instance_count; i++) {
			gdb_wifi_if_putchar(instances[i], c, flush);
		}
	} else {
		gdb_wifi_if_putchar(instances[bmp_wifi_instance_idx], c, flush);
	}
}

void gdb_target_printf(struct target_controller *tc, const char *fmt, va_list ap)
{
	(void)tc;
	gdb_voutf(fmt, ap);
}